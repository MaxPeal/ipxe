name: C/C++ CI

on: [push]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      ###fail-fast: true
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        # see https://github.com/DaanDeMeyer/reproc/blob/master/.github/workflows/main.yml.
        # see https://github.community/t5/GitHub-Actions/GitHub-Actions-Matrix-options-dont-work-as-documented/td-p/29558.
        # see https://github.com/svenstaro/proxyboi/blob/master/.github/workflows/publish.yml.
      matrix:
        name: [
          ubuntu-18-blib-a,
          ubuntu-18-all,
          ubuntu-18-everything,
          ubuntu-16-all,
          ubuntu-16-everything,
        ]
        
        include:
          - name: ubuntu-18-blib-a
            #not working# env: PATH=/usr/lib/ccache
            ##set-env: fooTOP=foo
            os: ubuntu-18.04
            DOITPROG: "bin/blib.a"
            version: "1"
            skiping: "0"
          
          - name: ubuntu-18-all
            #not working# env: PATH=/usr/lib/ccache
            ##set-env: fooTOP=foo
            os: ubuntu-18.04
            DOITPROG: "all"
            version: "1"
            skiping: "0"
          
          - name: ubuntu-18-everything
            os: ubuntu-18.04
            DOITPROG: "everything"
            version: "2"
            skiping: "78"

          - name: ubuntu-16-all
            os: ubuntu-16.04
            DOITPROG: "all"
            version: "3"
            skiping: "78"            
          
          - name: ubuntu-16-everything
            os: ubuntu-16.04
            DOITPROG: "everything"
            version: "4"
            skiping: "78"
      

#    runs-on: ubuntu-18.04
    steps:
    - run: exit ${{ matrix.skiping }}
    - name: ENV-output
      shell: bash
      run: env
    - name: ENV-output
      shell: bash
      run: set
    - name: Install Dependencies on Linux ubuntu-18.04
      if: matrix.os == 'ubuntu-18.04'
      run: sudo apt update && sudo apt install -y --no-install-recommends binutils-dev liblzma-dev syslinux genisoimage ccache
    - name: Install Dependencies on Linux ubuntu-16.04
      if: matrix.os == 'ubuntu-16.04'
      run: sudo apt update && sudo apt install -y binutils-dev liblzma-dev syslinux genisoimage ccache
    - name: Install ccache
      shell: bash
      run: |
        set -vx
        sudo apt install -y ccache
        # Update symlinks
        sudo /usr/sbin/update-ccache-symlinks
        #sudo mkdir -p /usr/local/etc/
        #sudo echo "cache_dir = $GITHUB_WORKSPACE/.ccache" > /usr/local/etc/ccache.conf
        #cat /usr/local/etc/ccache.conf
        mkdir -p $HOME/.ccache/
        echo "cache_dir = $GITHUB_WORKSPACE/.ccache" >> $HOME/.ccache/ccache.conf
        mkdir $GITHUB_WORKSPACE/.ccache/
        mkdir $GITHUB_WORKSPACE/.ccache/0/
        echo "foo" >> $GITHUB_WORKSPACE/.ccache/0/0dummy.meta
        #echo $PATH
        # Prepend ccache into the PATH
        # mkdir -p is not portable so do the mkdir in steps
        mkdir $HOME/bin
        mkdir $HOME/bin/.local
        mkdir $HOME/bin/.local/bin
        mkdir $HOME/.local
        mkdir $HOME/.local/bin
        ln -s /usr/lib/ccache/* $HOME/bin/
        ln -s /usr/lib/ccache/* $HOME/bin/.local/bin
        ln -s /usr/lib/ccache/* $HOME/.local/bin
        #cat $HOME/.bashrc
        #echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a $HOME/.bashrc
        #echo "export FOO=BLA" >> $HOME/.bashrc
        #echo "export FOOtwin=BLA" >> $HOME/.bashrc
        #echo "export FOOprofile=BLAprofile" >> $HOME/.profile
        #echo "export FOOtwin=BLAprofile" >> $HOME/.profile
        #echo "::set-env name=FOOtwin2CXX::g++-${{ matrix.version }}"
        # Source bashrc to test the new PATH
        #source $HOME/.bashrc && echo $PATH && echo $FOO
        #cat $HOME/.bashrc
        #cat $HOME/.profile

    - name: link /usr/lib/ccache/* to /usr/local/bin/
      run: sudo ln -s /usr/lib/ccache/* /usr/local/bin/
    - uses: actions/checkout@v1
    - name: ccache -s -p
      run: ccache -s -p
    - name: download ccache dir via artifacts
      uses: actions/download-artifact@v1
      with:
        #name: ccache-artifact-${{ runner.name }}
        name: ccache-artifact-foo
        #path: $HOME/.ccache
        # FIXME $HOME not working in action direct
        path: /home/runner/.ccache
      #if: failure()
      continue-on-error: true
    - name: download ccache dir via artifacts exit 78
      if: failure()
        # Exit code stops the workflow with a neutral status
        # https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#exit-codes-and-statuses
      run: exit 78
    - name: ls -laR .ccache
      run: ls -laR $HOME/.ccache
    - name: ccache -s -p ${{ runner.home }}
      run: ccache -s -p
    - name: ccache-ls-1
      run: \ls -1R $HOME/.ccache > $PWD/ccache-ls-1
    - name: cat ccache-ls-1
      run: cat $PWD/ccache-ls-1
    - name: Cache ccache dir
      uses: actions/cache@v1
      with:
        path: ~/.ccache # ccache cache files are stored in `~/.ccache` on Linux/macOS
        #path: $HOME/.ccache # ccache cache files are stored in `~/.ccache` on Linux/macOS
        #key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        #key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        #not working # key: ${{ runner.os }}-ccache-workspace-${{ hashFiles('**/*.meta') }}
        key: ${{ runner.os }}-ccache-workspace-${{ hashFiles('.ccache/**/*.meta') }}
        #key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        #not working key: ${{ runner.os }}-ccache-${{ hashFiles('~/.ccache/**/*.gradle') }}
        #not working key: ${{ runner.os }}-ccache-${{ hashFiles('/home/runner/.ccache/**/*.meta') }}
        # ##[error]The template is not valid. hashFiles('/home/runner/.ccache/**/*.meta') failed. Search pattern '/home/runner/.ccache/**/*.meta' doesn't match any file under '/home/runner/work/ipxe/ipxe'
        #key: ${{ runner.os }}-ccache-${{ runner.name }}
        restore-keys: |
          ${{ runner.os }}-ccache-workspace-${{ env.cache-name }}-
          ${{ runner.os }}-ccache-
          ${{ runner.os }}-
    - name: ccache -s -p
      run: ccache -s -p
    - name: ls -laR .ccache
      run: ls -laR $HOME/.ccache
    - name: ENV-Test2
      shell: bash
      run: |
        set -xv
        set
        env
        ls -altr /usr/local/bin/
        ls -altr /usr/lib/ccache
        hash gcc
        hash
        which gcc
        ccache -s -p
        cat $HOME/.bashrc
        cat $HOME/.profile
    #- name: export /usr/lib/ccache to path
   #  - name: configure
   #   run: ./configure
    - name: make -C src ${{ matrix.DOITPROG }}
      run: make -C src ${{ matrix.DOITPROG }}
    #- name: make -C src everything
    #  run: make -C src everything
    #- name: bin-x86_64-linux/tests.linux
    #  run: make -C src bin-x86_64-linux/tests.linux && ./bin-x86_64-linux/tests.linux
    #- name: bin-i386-linux/tests.linux
    #  run: make -C src bin-i386-linux/tests.linux && ./bin-i386-linux/tests.linux
   #valgrind ./bin-x86_64-linux/tests.linux
   #  valgrind ./bin-i386-linux/tests.linux
    - name: ccache -s -p
      #shell: bash
      run: |
        ls -latr $HOME/bin $HOME/.local/bin $HOME/bin/.local/bin
        which gcc
        ccache -s -p
    - name: ls -laR .ccache
      run: ls -laR $HOME/.ccache
    - name: ccache-ls-1-update
      run: \ls -1R $HOME/.ccache > $PWD/ccache-ls-1
#    - name: upload ccache dir via artifacts
#      uses: actions/upload-artifact@v1
#      with:
#        #name: ccache-artifact-${{ runner.name }}
#        name: ccache-artifact-foo
#        path: /home/runner/.ccache
#      continue-on-error: true
